======================
Playtools Architecture
======================

Vision
======

Playtools and related applications will be an easy way for GMs to create, edit
and run their games, share their games with other GMs, publish their games in
a sellable format, and collect/visit/read/use the games of other GMs.

Things We Must Persist
======================

This is a rough schema.

-----------------------------------------

Goonmill
--------

The goonmill monster creator.

User
~~~~
    1> foaf identifier

    1..n> Workspace

Workspace
~~~~~~~~~
    0..n> MonsterGroup

    0..n> Encounter

MonsterGroup
~~~~~~~~~~~~
    1> name

    1> template

    1> image

    1..n> encounter tag
    
    1..n> Monster

Monster
~~~~~~~
    1> name

    1> hp

    1> alignment

    1> NPC Block
        1..n> class levels

        1..n> feat selections

        1> skillpoint distribution

        1..n> misc class choices

    1> backstory/personality/description

    0..n> spells readied

    0..n> treasure/equipment

Encounter
~~~~~~~~~
    1> notes

-----------------------------------------

Vellumbot
---------

The vellumbot irc bot and session logger.

User
~~~~
    1> foaf identifier

    1> preferred encoding

    0..n> Alias

Alias
~~~~~
    1> words

    1> expression

Session
~~~~~~~
    1> foaf identifier?

    1> preferred encoding

    1..n> GM

    1..n> Log Event

    1> Game State

GM
~~
    1> foaf identifier

Game State
~~~~~~~~~~
    1> encounter tag

    1> init list

    1> game time

    0..n> recent Treasure

    0..n> Character

Treasure
~~~~~~~~
    1> count

    1> weight

    1> description
    
    1> value
    
    1> who carries (foaf identifier)
    
    1> identified-flag

Character
~~~~~~~~~
    1> current hp
    
    0..n> spells exhausted

    0..n> spells readied
    
    0..n> Time-Based Effect

Time-Based Effect
~~~~~~~~~~~~~~~~~
    1> start gametime

    1> end gametime

    1> description

Log Event
~~~~~~~~~
    1> foaf identifier (from speaker)

    1..n> foaf identifier (to recipient channel)

    1> private-flag

    1> timestamp

    1> formatted message

-----------------------------------------

Mutamill
--------

The mutamill character generator.

User
~~~~
    1> foaf identifier

    0..n> Character

Character
~~~~~~~~~
    1> name

    1> game system

    1> game-system specific stuff

-----------------------------------------

Halfrest
--------

The halfrest pastebin.

User
~~~~
    1> foaf identifier

    0..n> Page

Page
~~~~
    1> text

-----------------------------------------

Playtools
---------

The Playtools data access layer.

SRD/SQL

SRD/RDF

SRD/FTS


Communication Channels
======================

* Halfrest pages should be readable to other applications
  
* Vellumbot sessions should accept messages from other applications, and be
  readable to other applications in a filtered fashion


Application Core Concepts
=========================

Playtools is a data access layer (API).  This encompasses more than simple
table reads, however.  Playtools does not open any network sockets; it relies
on an application to publish a SPARQL endpoint or web application so others
can reach the data through the Playtools API.  It is designed for an
application to be built on top of it that opens the network socket for the
rest of the world.

Vellumbot is a game session nanny.  It takes care of one core function of
gaming, random rolls, and provides access to gamerules data and shared
encounters from around the world.  It keeps a Session object alive where
applications from around the world can access it.  They can communicate with
it by posting messages to it, allowing a continuance of a game session
independent of the application using it.

Halfrest stores RST character sheets in a parseable, human-editable form.  

Goonmill is a monster and NPC builder.  It is a web application for
constructing the monsters that go into encounters.  It also allows the user to
write up the script for an encounter and publish it at a URL so it can be
accessed by other applications.

Mutamill is a configurable chargen.  It allows you to plugin a ruleset and
generate a user interface from that.

.. vim:set ft=rst:
